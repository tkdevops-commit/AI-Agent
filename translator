from langdetect import detect, DetectorFactory
from textblob import TextBlob
import openai

# Ensure consistent language detection results
DetectorFactory.seed = 0

# OpenAI API Key (replace with your actual key)
OPENAI_API_KEY = "your-api-key"
openai.api_key = OPENAI_API_KEY

def detect_and_refine_query(user_query, user_region="global"):
    try:
        # Detect language
        detected_lang = detect(user_query)
    except Exception as e:
        print(f"Error detecting language: {e}")
        detected_lang = "en"  # Default to English if detection fails
    
    # Translate if not English
    translated_query = user_query
    if detected_lang != "en":
        try:
            translated_query = str(TextBlob(user_query).translate(to="en"))
        except Exception as e:
            print(f"Translation error: {e}")
            translated_query = user_query  # Fallback to original if translation fails

    # Regional syntax adjustments
    regional_adjustments = {
        "china": lambda text: text.replace("please", "").replace("can you", "would you mind"),
        "australia": lambda text: text.replace("hello", "G'day").replace("can you", "could you"),
        "uk": lambda text: text.replace("color", "colour").replace("can you", "could you please"),
    }
    
    refined_query = regional_adjustments.get(user_region, lambda x: x)(translated_query)

    return refined_query, detected_lang

def ask_chatgpt(refined_query, user_language):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": f"User's original language: {user_language}. Translate back if needed."},
                {"role": "user", "content": refined_query}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"ChatGPT API error: {e}")
        return "Error fetching response from ChatGPT."

# Example usage
if __name__ == "__main__":
    user_query = "你好，你能帮我写一封正式的邮件吗？"  # Chinese user example
    user_region = "china"  # Can be "china", "australia", "uk", etc.

    refined_query, detected_lang = detect_and_refine_query(user_query, user_region)
    chatgpt_response = ask_chatgpt(refined_query, detected_lang)

    print("Detected Language:", detected_lang)
    print("Refined Query:", refined_query)
    print("ChatGPT Response:", chatgpt_response)
